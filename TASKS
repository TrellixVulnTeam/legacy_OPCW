# [X] Positional argument resolution / generation
# [X] Keyword argument resolution / generation
# [X] Remove `asciz` and `arena` (use `string` and smart pointers for nodes)
# [X] Local scope chain (list [stack] of dicts) on each `code.Function`
# [X] Parameters are in the local scope
# [ ] Recursive resolution of parameter types
# [ ] Resolution of return type using parameter types
# [ ] Assignment (lval / rval, etc.)
# [ ] Augment assignment
# [ ] Structures
# [ ] Pointers
# [ ] Selection expressions (`if`)
# [ ] Iteration statements (`while`, `loop`)
# [ ] Sized arrays
# [ ] Strings
# [ ] Characters
# [ ] Enumerations
# [ ] Pattern matching
# [ ] Traits
# [ ] Parameteric types
# [ ] Parameteric functions
# [ ] Implement
# [ ] Parameteric implement
# [ ] Alias
# [ ] Parameteric alias `use Name<T> = Other<int, T>`
#                       `use nil<T> = 0 as *T`
# [ ] Improve error reporting to properly state "nothing" when referring
#     the absence of value (eg. "no binary operation `/` can be applied to nothing and `int64`")
# [ ] Add error diagnostic for missing return value
# [ ] Hygenic macros; this requires moving to 2-pass parsing
#     with the initial pass needed to extract the macros from the token stream
